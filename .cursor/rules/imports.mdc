---
description: Cairo Imports
globs: *.ts,*.tsx,*.js,*.jsx
---
# Imports in Cairo Coder

## External Libraries

### Backend and Agent Libraries
- `express`: Web server framework.
  - Used in: `packages/backend/src/routes/cairocoder.ts`
  - Import: `import express, { Router } from 'express';`
- `cors`: CORS middleware for Express.
  - Used in: `packages/backend/src/server.ts`
  - Import: `import cors from 'cors';`
- `mongodb`: MongoDB client for database operations.
  - Used in: `packages/agents/src/db/vectorStore.ts`
  - Import: `import { MongoClient } from 'mongodb';`
- `@langchain/core`: LangChain core libraries.
  - Used in: `packages/agents/src/core/agentFactory.ts`
  - Import: `import { BaseMessage } from '@langchain/core/messages';`
  - Import: `import { Embeddings } from '@langchain/core/embeddings';`
  - Import: `import { Document } from '@langchain/core/documents';`
- `anthropic`: Anthropic Claude API client.
  - Used in: `packages/agents/src/models/`
  - Import: `import Anthropic from '@anthropic-ai/sdk';`
- `openai`: OpenAI API client.
  - Used in: `packages/agents/src/models/`
  - Import: `import OpenAI from 'openai';`
- `@google/generative-ai`: Google AI API client.
  - Used in: `packages/agents/src/models/`
  - Import: `import { GoogleGenerativeAI } from '@google/generative-ai';`
- `uuid`: For generating unique identifiers.
  - Used in: `packages/backend/src/routes/cairocoder.ts`
  - Import: `import { v4 as uuidv4 } from 'uuid';`
- `toml`: For parsing TOML configuration files.
  - Used in: `packages/agents/src/config/settings.ts`
  - Import: `import toml from '@iarna/toml';`

### Data Ingestion Libraries
- `axios`: HTTP client for downloading documentation.
  - Used in: `packages/ingester/src/ingesters/MarkdownIngester.ts`
  - Import: `import axios from 'axios';`
- `adm-zip`: For handling ZIP archives.
  - Used in: `packages/ingester/src/ingesters/MarkdownIngester.ts`
  - Import: `import AdmZip from 'adm-zip';`
- `fs/promises`: Node.js file system promises API.
  - Used in: `packages/ingester/src/ingesters/MarkdownIngester.ts`
  - Import: `import * as fs from 'fs/promises';`

## Internal Modules

### Agent Modules
- `core/pipeline`: RAG pipeline components.
  - Used in: `packages/agents/src/core/agentFactory.ts`
  - Import: `import { RagPipeline } from './pipeline/ragPipeline';`
- `config`: Configuration management.
  - Used in: `packages/agents/src/core/agentFactory.ts`
  - Import: `import { getAgentConfig } from '../config/agent';`
- `db`: Database interaction.
  - Used in: `packages/agents/src/core/agentFactory.ts`
  - Import: `import { VectorStore } from '../db/vectorStore';`
- `types`: Type definitions.
  - Used in: `packages/agents/src/core/agentFactory.ts`
  - Import: `import { LLMConfig } from '../types';`
- `utils`: Utility functions.
  - Used in: `packages/backend/src/app.ts`
  - Import: `import { logger } from '@cairo-coder/agents/utils/index';`

### Backend Modules
- `routes`: API route definitions.
  - Used in: `packages/backend/src/server.ts`
  - Import: `import routes from '../routes';`
- `config`: Server configuration.
  - Used in: `packages/backend/src/server.ts`
  - Import: `import { initializeLLMConfig } from './config/llm';`
  - Import: `import { getPort } from '@cairo-coder/agents/config/settings';`
- `cairocoder`: Main endpoint handler.
  - Used in: `packages/backend/src/routes/index.ts`
  - Import: `import cairocoderRouter from './cairocoder';`

### Ingester Modules
- `BaseIngester`: Abstract base class for all ingesters.
  - Used in: `packages/ingester/src/ingesters/MarkdownIngester.ts`
  - Import: `import { BaseIngester } from '../BaseIngester';`
- `IngesterFactory`: Factory for creating ingesters.
  - Used in: `packages/ingester/src/chat/completionsEmbeddings.ts`
  - Import: `import { IngesterFactory } from './IngesterFactory';`
- `utils`: Utility functions for ingestion.
  - Used in: `packages/ingester/src/ingesters/MarkdownIngester.ts`
  - Import: `import { processDocFiles } from '../utils/fileUtils';`
  - Import: `import { isInsideCodeBlock, calculateHash } from '../utils/contentUtils';`

## Common Import Patterns

### For Backend API Routes
```typescript
import express, { Router } from 'express';
import { AIMessage, HumanMessage, SystemMessage, BaseMessage } from '@langchain/core/messages';
import { v4 as uuidv4 } from 'uuid';
import { 
  getVectorDbConfig,
  logger,
  RagAgentFactory,
  LLMConfig,
  VectorStore,
} from '@cairo-coder/agents';
```

### For Agent Core
```typescript
import { BaseMessage } from '@langchain/core/messages';
import { Embeddings } from '@langchain/core/embeddings';
import { getAgentConfig } from '../config/agent';
import { RagPipeline } from './pipeline/ragPipeline';
import { VectorStore } from '../db/vectorStore';
import { LLMConfig } from '../types';
```

### For Ingesters
```typescript
import * as fs from 'fs/promises';
import * as path from 'path';
import { Document } from '@langchain/core/documents';
import { BookChunk, DocumentSource } from '@cairo-coder/agents/types/index';
import { BaseIngester } from '../BaseIngester';
import { BookConfig, BookPageDto, ParsedSection } from '../utils/types';
```
