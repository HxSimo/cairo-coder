---
description: Cairo Imports
globs: *.ts,*.tsx,*.js,*.jsx
---
# Imports in Cairo Coder

## External Libraries

### Backend and Agent Libraries
- `express`: Web server framework.
  - Used in: `packages/backend/src/app.ts`
  - Import: `import express from 'express';`
- `cors`: CORS middleware for Express.
  - Used in: `packages/backend/src/app.ts`
  - Import: `import cors from 'cors';`
- `mongodb`: MongoDB client for database operations.
  - Used in: `packages/agents/src/db/`
  - Import: `import { MongoClient } from 'mongodb';`
- `anthropic`: Anthropic Claude API client.
  - Used in: `packages/agents/src/lib/`
  - Import: `import Anthropic from '@anthropic-ai/sdk';`
- `openai`: OpenAI API client.
  - Used in: `packages/agents/src/lib/`
  - Import: `import OpenAI from 'openai';`
- `@google/generative-ai`: Google AI API client.
  - Used in: `packages/agents/src/lib/`
  - Import: `import { GoogleGenerativeAI } from '@google/generative-ai';`

### Frontend Libraries
- `react`: UI library.
  - Used in: `packages/ui/components/`
  - Import: `import React from 'react';`
- `next`: React framework.
  - Used in: `packages/ui/app/`
  - Import: `import { useRouter } from 'next/router';`
- `tailwindcss`: CSS framework.
  - Used in: `packages/ui/components/`
  - Applied via class names.

## Internal Modules

### Agent Modules
- `pipeline`: RAG pipeline components.
  - Used in: `packages/agents/src/core/ragAgentFactory.ts`
  - Import: `import { QueryProcessor, DocumentRetriever, CodeGenerator } from './pipeline';`
- `config`: Configuration management.
  - Used in: `packages/agents/src/`
  - Import: `import { config } from './config';`
- `db`: Database interaction.
  - Used in: `packages/agents/src/core/`
  - Import: `import { VectorStore } from './db/vectorStore';`
- `models`: LLM and embedding models interfaces.
  - Used in: `packages/agents/src/core/`
  - Import: `import { LLMProviderFactory } from './models/llmProviderFactory';`
  - Import: `import { EmbeddingProviderFactory } from './models/embeddingProviderFactory';`

### Backend Modules
- `routes`: API routes.
  - Used in: `packages/backend/src/app.ts`
  - Import: `import { generateRoutes } from './routes/generate';`
  - Import: `import { modelsRoutes } from './routes/models';`
- `handlers`: Request handlers.
  - Used in: `packages/backend/src/routes/`
  - Import: `import { generateHandler } from '../handlers/generateHandler';`

### Ingester Modules
- `baseIngester`: Abstract base class for all ingesters.
  - Used in: `packages/ingester/src/ingesters/`
  - Import: `import { BaseIngester } from '../BaseIngester';`
- `ingesterFactory`: Factory for creating ingesters.
  - Used in: `packages/ingester/src/scripts/`
  - Import: `import { IngesterFactory } from '../IngesterFactory';`
- `utils`: Utility functions.
  - Used in: `packages/ingester/src/`
  - Import: `import { downloadFile, extractArchive } from './utils/fileUtils';`
  - Import: `import { processContent, splitMarkdown } from './utils/contentUtils';`

## Common Import Patterns

### For Backend API Routes
```typescript
import express from 'express';
import { generateHandler } from '../handlers/generateHandler';
import { config } from '../config';
```

### For Agent Core
```typescript
import { VectorStore } from './db/vectorStore';
import { LLMProviderFactory } from './models/llmProviderFactory';
import { EmbeddingProviderFactory } from './models/embeddingProviderFactory';
```

### For Ingesters
```typescript
import { BaseIngester } from '../BaseIngester';
import { BookPageDto, ParsedSection, BookChunk } from '../types';
import { Document } from 'langchain/document';
import { VectorStore } from '../../agents/src/db/vectorStore';
```
