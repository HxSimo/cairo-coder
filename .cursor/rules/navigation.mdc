# Navigation Rules for Cairo Coder Codebase

## Project Structure Overview

The Cairo Coder codebase is organized as a monorepo with multiple packages:

- `packages/agents`: Contains the core agent logic for RAG-based Cairo code generation
- `packages/backend`: Express-based server handling API endpoints for code generation
- `packages/ingester`: Tools for ingesting and processing Cairo documentation for the vector database
- `packages/typescript-config`: Shared TypeScript configuration

## Key Directories and Files

### Agent Logic
- `packages/agents/src/core/pipeline`: Contains the RAG pipeline implementation
  - `ragPipeline.ts`: Orchestrates the entire RAG process
  - `queryProcessor.ts`: Processes and reformulates user queries
  - `documentRetriever.ts`: Retrieves relevant documents from vector database
  - `answerGenerator.ts`: Generates Cairo code based on retrieved documents
- `packages/agents/src/core`: Core agent functionality
  - `agentFactory.ts`: Factory for creating RAG agents
- `packages/agents/src/db`: Database interaction logic
- `packages/agents/src/config`: Configuration handling
- `packages/agents/src/utils`: Utility functions
- `packages/agents/src/types`: TypeScript type definitions

### Backend
- `packages/backend/src/api`: API routes and handlers
  - `cairocoder.ts`: Main handler for the Cairo code generation endpoint
  - `routes.ts`: API route definitions
  - `config.ts`: API configuration
- `packages/backend/src/app.ts`: Express application setup
- `packages/backend/src/server.ts`: Server initialization
- `packages/backend/src/config`: Server configuration

### Ingestion System
- `packages/ingester/src/`: Source code for the ingester package
  - `BaseIngester.ts`: Abstract base class for all ingesters
  - `IngesterFactory.ts`: Factory for creating ingesters based on source
  - `generateEmbeddings.ts`: Main script for generating embeddings
  - `ingesters/`: Source-specific ingester implementations
    - `CairoBookIngester.ts`: Ingester for Cairo Book
    - `CairoByExampleIngester.ts`: Ingester for Cairo By Example
    - `StarknetDocsIngester.ts`: Ingester for Starknet Docs (may be used for Cairo docs)
    - `StarknetFoundryIngester.ts`: Ingester for Starknet Foundry
    - `OpenZeppelinDocsIngester.ts`: Ingester for OpenZeppelin Docs
    - `MarkdownIngester.ts`: Base ingester for Markdown format docs
    - `AsciiDocIngester.ts`: Base ingester for AsciiDoc format docs
  - `utils/`: Utility functions for ingestion
  - `shared.ts`: Shared types and interfaces

## Navigation Patterns

1. **Following the RAG Pipeline Flow**:
   - Start at `packages/agents/src/core/agentFactory.ts`
   - Explore the pipeline components in `packages/agents/src/core/pipeline/`
   - See how code generation happens in `packages/agents/src/core/pipeline/answerGenerator.ts`

2. **Understanding API Endpoints**:
   - Start at `packages/backend/src/app.ts`
   - Follow through to `packages/backend/src/api/routes.ts`
   - Examine the main handler in `packages/backend/src/api/cairocoder.ts`

3. **Configuration Flow**:
   - Look for configuration files in the root directory
   - Check `packages/agents/src/config/` for agent configuration
   - See how configuration is loaded in backend via `packages/backend/src/config/`

## Common Navigation Tasks

- **To understand the RAG process**: Follow the pipeline components in `packages/agents/src/core/pipeline/`
- **To see how user queries are processed**: Start at the API handlers in `packages/backend/src/api/cairocoder.ts`
- **To understand data ingestion**: Check the ingester implementations in `packages/ingester/src/ingesters/`
- **To modify embeddings generation**: Look at `packages/ingester/src/chat/completionsEmbeddings.ts`

## Key Files for Common Tasks

### Adding a New Documentation Source
1. Create a new ingester in `packages/ingester/src/ingesters/`
2. Update `IngesterFactory.ts` to include the new source
3. Update the document source types in `packages/agents/src/types/`

### Modifying the RAG Pipeline
1. Update the relevant component in `packages/agents/src/core/pipeline/`
2. Adjust the pipeline configuration in `packages/agents/src/core/agentFactory.ts` if needed

### Adding or Modifying API Endpoints
1. Update route definitions in `packages/backend/src/api/routes.ts`
2. Implement handlers in `packages/backend/src/api/cairocoder.ts` or add new handlers

### Running Ingestion
1. Use the script at `packages/ingester/src/chat/completionsEmbeddings.ts`
2. Or run `pnpm generate-embeddings` from the project root

## Key Endpoints

- `/chat/completions`: Main endpoint for Cairo code generation
  - Accepts POST requests with messages array in OpenAI format
  - Returns generated Cairo code

## Docker and Deployment Files

- `docker-compose.yml`: Main Docker Compose configuration
- `backend.dockerfile`: Dockerfile for the backend service
- `ingest.dockerfile`: Dockerfile for running ingestion tasks
