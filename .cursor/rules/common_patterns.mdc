---
description: Common Patterns
globs: *.ts,*.tsx,*.js,*.jsx
---
# Common Patterns in Starknet Agent

## RAG Pipeline Architecture
- Core pattern for information retrieval and response generation.
- Steps in the RAG pipeline:
  1. **Query Processor**: `packages/agents/src/pipeline/queryProcessor.ts`
     - Analyzes user queries and chat history
     - Reformulates queries to optimize document retrieval
  2. **Document Retriever**: `packages/agents/src/pipeline/documentRetriever.ts`
     - Converts queries to vector embeddings
     - Searches vector database using cosine similarity
     - Returns relevant document chunks with metadata
  3. **Answer Generator**: `packages/agents/src/pipeline/answerGenerator.ts`
     - Uses LLMs to generate comprehensive responses
     - Includes source citations in the response
     - Handles different conversation contexts
  4. **RAG Pipeline**: `packages/agents/src/pipeline/ragPipeline.ts`
     - Orchestrates the entire process flow
     - Manages error handling and logging

## Factory Pattern
- Used for creating RAG agents with different configurations.
- Example: `packages/agents/src/ragAgentFactory.ts`
  - Creates different agent instances based on focus mode.
  - Configures appropriate vector stores and prompt templates.
- Also used in the ingester package: `packages/ingester/src/IngesterFactory.ts`
  - Creates appropriate ingester instances based on documentation source.
  - Enables easy addition of new document sources.

## Template Method Pattern
- Used in the ingester package for standardizing the ingestion process.
- Example: `packages/ingester/src/BaseIngester.ts`
  - Defines the skeleton of the ingestion algorithm in a method.
  - Defers some steps to subclasses (download, extract, process).
  - Ensures consistent process flow while allowing customization.
  - Common workflow: Download → Extract → Process → Generate Embeddings → Store

## WebSocket Streaming Architecture
- Used for real-time streaming of agent responses.
- Example: `packages/backend/src/websocket/`
  - Components:
    - `connectionManager.ts`: Manages WebSocket connections and sessions
    - `messageHandler.ts`: Processes incoming messages and routes to appropriate handlers
  - Flow: Connection → Authentication → Message Handling → Response Streaming
  - Enables real-time, chunk-by-chunk delivery of LLM responses

## Repository Pattern
- Used for database interactions.
- Example: `packages/agents/src/db/vectorStore.ts`
  - Abstracts MongoDB vector search operations
  - Provides methods for similarity search and filtering
  - Handles connection pooling and error handling
- Used in ingester for vector store operations: `packages/ingester/src/utils/vectorStoreUtils.ts`

## Configuration Management
- Centralized configuration using TOML files.
- Example: `packages/agents/src/config.ts` and `packages/agents/sample.config.toml`
  - Loads configuration from files and environment variables.
  - Provides typed access to configuration values.
  - Supports multiple LLM providers (OpenAI, Anthropic, etc.)
  - Configures multiple vector databases for different focus modes

## Dependency Injection
- Used for providing services to components.
- Example: `packages/agents/src/ragAgentFactory.ts`
  - Injects vector stores, LLM providers, and config settings into pipeline components
  - Makes testing easier by allowing mock implementations
  - Enables flexible configuration of different agent types

## Focus Mode Implementation
- Pattern for targeting specific document sources.
- Example: `packages/agents/src/config/agentConfigs.ts`
  - Defines different focus modes (Starknet Ecosystem, Cairo Book, etc.)
  - Configures different vector stores for each mode
  - Customizes prompts and retrieval parameters per mode
  - Enables specialized knowledge domains

## React Hooks for State Management
- Custom hooks for managing UI state and WebSocket communication.
- Example: `packages/ui/lib/hooks/`
  - Encapsulates WebSocket connection logic.
  - Manages chat history and UI state.
  - Handles real-time streaming of responses.

## Error Handling and Logging
- Centralized error handling with detailed logging.
- Example: `packages/agents/src/utils/logger.ts`
  - Configurable log levels based on environment
  - Context-rich error messages with timestamps and stack traces
  - Proper error propagation through the pipeline
- Used throughout the codebase for consistent error reporting.
