---
description: Project Instructions
globs: 
---
# Starknet Agent Project Instructions

## Overview
- Starknet Agent is an AI-powered search engine specifically designed for the Starknet Ecosystem.
- It uses Retrieval-Augmented Generation (RAG) to provide accurate, source-cited answers to questions about Starknet and Cairo.
- The project is built with TypeScript, Node.js, Express, MongoDB Atlas (vector search), and Next.js.
- Originally forked from Perplexica, adapted for the Starknet ecosystem.

## Architecture
- Monorepo structure with multiple packages:
  - `packages/agents/`: Core RAG pipeline (query processing, document retrieval, answer generation)
  - `packages/backend/`: Express server with WebSocket support for real-time streaming
  - `packages/ui/`: Next.js frontend application with chat interface
  - `packages/ingester/`: Data ingestion tools for documentation sources
  - `packages/typescript-config/`: Shared TypeScript configuration

## RAG Pipeline Flow
1. **Query Processing**: Analyzes and reformulates user queries to improve retrieval
2. **Document Retrieval**: Searches vector database for relevant documents using cosine similarity
3. **Answer Generation**: Uses LLMs to generate comprehensive responses with source citations
4. **Real-time Streaming**: Delivers responses to the UI as they're generated

## Focus Modes
- **Starknet Ecosystem**: Searches across all indexed resources
- **Cairo Book**: Focuses on the Cairo programming language book
- **Starknet Docs**: Targets official Starknet documentation
- **Starknet Foundry**: Searches Starknet Foundry documentation
- **Cairo By Example**: Provides examples from Cairo By Example resource
- **OpenZeppelin Docs**: Searches OpenZeppelin's Starknet documentation

## Ingestion System
- The ingester package handles downloading, processing, and storing documentation.
- Supported documentation sources:
  - Cairo Book
  - Starknet Docs
  - Starknet Foundry
  - Cairo By Example
  - OpenZeppelin Docs
- Modular architecture with a `BaseIngester` abstract class and source-specific implementations.
- Follows the template method pattern for standardized ingestion process.
- Run ingestion with `pnpm generate-embeddings` or `pnpm generate-embeddings:yes` from the project root.
- Weekly automated embedding generation via GitHub Actions.

## Development Workflow
- Use `pnpm dev` or `turbo dev` to start the development server
- MongoDB Atlas with vector search capabilities required for embeddings storage
- Configuration is managed through TOML files (copy `sample.config.toml` to `config.toml`)
- Docker is used for containerization and deployment
- Add new documentation sources by extending the `BaseIngester` class and registering in `IngesterFactory`

## Commands
- **Build**: `pnpm build`, `pnpm --filter @cairo-coder/agents build`
- **Dev**: `pnpm dev` (starts all services with auto-reload)
- **Test**: `pnpm --filter @cairo-coder/agents test`
- **Single test**: `pnpm --filter @cairo-coder/agents test -- -t "test name pattern"`
- **Type check**: `pnpm --filter @cairo-coder/backend check-types`

## Testing
- Jest is used for all testing
- Run tests with `pnpm test` or `turbo test`
- Test files are located in `__tests__/` directories
- Mock external dependencies, especially LLM and database calls
- Test each ingester implementation separately with mocked vector stores

## Deployment
- Docker Compose is used for deployment
- Production configuration in `docker-compose.prod-hosted.yml`
- Environment variables should be set according to `.env.example` files
- Ingestion can be run as a separate process using `ingest.dockerfile`
