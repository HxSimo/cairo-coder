---
description: Project Instructions
globs: 
---
# Cairo Coder Project Instructions

## Overview
- Cairo Coder is an AI-powered code generation service specifically designed for generating Cairo smart contracts and programs.
- It uses Retrieval-Augmented Generation (RAG) to provide accurate, well-documented Cairo code based on natural language descriptions.
- The project is built with TypeScript, Node.js, Express, MongoDB Atlas (vector search), and the Cairo programming language.
- Based on Starknet Agent, which was forked from Perplexica, adapted specifically for Cairo code generation.

## Architecture
- Monorepo structure with multiple packages:
  - `packages/agents/`: Core RAG pipeline (query processing, document retrieval, code generation)
  - `packages/backend/`: Express server with REST API endpoints for code generation
  - `packages/ingester/`: Data ingestion tools for Cairo documentation sources
  - `packages/typescript-config/`: Shared TypeScript configuration

## RAG Pipeline Flow
1. **Query Processing**: Analyzes and reformulates user requests to improve retrieval
2. **Document Retrieval**: Searches vector database for relevant Cairo documentation using cosine similarity
3. **Code Generation**: Uses LLMs to generate functional Cairo code based on the retrieved documentation
4. **JSON Response**: Delivers code in an OpenAI-compatible format

## Cairo Documentation Sources
- **Cairo Book**: Comprehensive guide to the Cairo programming language
- **Cairo Foundry Documentation** 
- **Cairo By Example**: Practical examples of Cairo programming patterns

## Ingestion System
- The ingester package handles downloading, processing, and storing Cairo documentation.
- Supported documentation sources:
  - Cairo Book
  - Cairo Language Documentation
  - Cairo Foundry
  - Cairo By Example
- Modular architecture with a `BaseIngester` abstract class and source-specific implementations.
- Follows the template method pattern for standardized ingestion process.
- Run ingestion with `pnpm generate-embeddings` from the project root.

## Development Workflow
- Use `pnpm dev` to start the development server
- MongoDB Atlas with vector search capabilities required for embeddings storage
- Configuration is managed through TOML files (copy `sample.config.toml` to `config.toml`)
- Docker is used for containerization and deployment
- Add new documentation sources by extending the `BaseIngester` class and registering in `IngesterFactory`

## API Endpoint
- `/generate`: Main endpoint for generating Cairo code
  - Takes input in OpenAI-compatible format (array of messages)
  - Returns generated Cairo code with proper formatting and documentation
  - Supports system messages for context and guidance

## Commands
- **Build**: `pnpm build`
- **Dev**: `pnpm dev` (starts all services with auto-reload)
- **Test**: `pnpm test`
- **Single test**: `pnpm test -t "test name pattern"`
- **Type check**: `pnpm check-types`
- **Generate embeddings**: `pnpm generate-embeddings`
- **Clean**: `pnpm clean` (removes build files), `pnpm clean:all` (removes node_modules)

## Testing
- Jest is used for all testing
- Run tests with `pnpm test`
- Test files are located in `__tests__/` directories
- Mock external dependencies, especially LLM and database calls
- Test each ingester implementation separately with mocked vector stores

## Deployment
- Docker Compose is used for deployment
- Build and run with `docker-compose up --build`
- Environment variables should be set according to `config.toml` files
- Ingestion can be run with `pnpm generate-embeddings`
